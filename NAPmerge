#!/usr/bin/env perl
#By Thomas J Creedy, thomas@tjcreedy.co.uk

use warnings;
use strict;
use Getopt::Long;
use File::Basename;
use File::Path qw(make_path remove_tree);
use File::Copy qw(move);
use File::Which;
use List::Util qw(all any max); 
use Algorithm::Loops qw(NestedLoops);
use Parallel::ForkManager;
use Time::HiRes qw(usleep);
use Cwd qw(cwd);
use Data::Dumper;

########################################################
# INITIALISE VARIABLES AND SET DEFAULTS
#

my $version = "0.4.2"; #25/01/2019
my $help;
my $outpath;
my %parameters;
my %itsx;
my %primers;
our $verbose;
my $threads = 1;
our $debug;

my $script = basename($0,());

# CREATE HELPFILE

my $usage =<<USAGE;

Description:

	This is $script version $version of the NGS Amplicon Pipeline. It takes in a pair or set of paired files, such as those output from NAPdemux, and carries out a sequence of processes by calling external programs:
		# Primer trimming - removes specified number of bases from F and R reads
		# Merging - combining overlapping read pairs
		# Filtering - removing poor quality reads 
		# ITSx filtering - searching for fungal sequences (OPTIONAL)
		# Read naming - adding the sample name to every read for future clustering and mapping
	The script can run with each parameter specified with a single value, in which case it outputs a fasta for each pair of fastq files, or if parameter ranges are specified it will loop through every combination of all parameters and outputs a directory containing the fastas for each unique combination of parameters. Either way, a csv log file is output.
	
	For more information, see https://github.com/tjcreedy/NAPtime/wiki/NAPmerge

Usage:

	Basic mode
	$script -output <dir> -forwardprimerl <n> -reverseprimerl <n> -pearquality <n> -eemax <n> [-itsx <path/to/HMMs> -taxon_itsx <tax> -region_itsx <reg> -output_itsx <full>] [-threads <n>] [-verbose] <inputfqs>
	
	Parameter exploration mode
	$script -output <dir> -forwardprimerl <n> -reverseprimerl <n> -pearquality <n-n,n> -eeemax <n-n,n> [-threads <n>] [-v] <inputfqs>

Arguments:

	        outpath:  Path to a directory in which output files and the log table are written.
	 forwardprimerl:  Number of bases to trim from the forward reads.
	 reverseprimerl:  Number of bases to trim from the reverse reads.
	fprimersequence:  A base sequence to trim from the forward reads.
	rprimersequence:  A base sequence to trim from the reverse reads.
	    primersfile:  Path to a file containing base sequences to trim - line 1 forward, line 2 reverse.
	     stricttrim:  Should read pairs not matching one or both primer sequences be discarded?
	    pearquality:  A value or range to pass to PEAR as a -q option.
	          eemax:  A value or range to pass to USEARCH110 fastq_filter as a -fastq_maxee option
	           itsx:  If ITSx is required, the path to HMMs to pass to the function. Optional.
	     taxon_itsx:  If ITSx is used, the taxon or taxa (according to the ITSx requirements) to filter for. Required if using ITSx, default "all".
	    region_itsx:  If ITSx is used, the region (according to the ITSx requirements) to filter for. Currently, only one region is accepted, do not list more than one. Required if using ITSx.
	    output_itsx:  If ITSx is used, whether to output the complete region ("complete"), complete and partial regions ("partial") or the full sequence ("full") for matching reads. Required if using ITSx.
	        threads:  Number of CPU threads to use. Default 1.
	        verbose:  Reports on progress.
	           help:  Prints out this helpful message.

USAGE

# SET UP HEADER

my $timedate = timestamp()." ".datestamp();
my $timer = "100000";
my $title =<<TITLE;
  _   _          _____  _   _                 
 | \\ | |   /\\   |  __ \\| | (_)                
 |  \\| |  /  \\  | |__) | |_ _ _ __ ___   ___  
 | . ` | / /\\ \\ |  ___/| __| | '_ ` _ \\ / _ \\ 
 | |\\  |/ ____ \\| |    | |_| | | | | | |  __/ 
 |_| \\_/_/    \\_\\_|     \\__|_|_| |_| |_|\\___| 
TITLE


######################################################
# GET INPUTS AND PARSE
#

GetOptions("outpath=s"		=> \$outpath,
	   "forwardprimerl=i"	=> \$primers{length}{forward},
	   "reverseprimerl=i"	=> \$primers{length}{reverse},
	   "fprimersequence=s"	=> \$primers{sequence}{forward},
	   "rprimersequence=s"	=> \$primers{sequence}{reverse},
	   "primersfile=s"	=> \$primers{sequence}{file},
	   "stricttrim"		=> \$primers{sequence}{strict},
	   "pearquality=s"	=> \$parameters{pearquality},
	   "eemax=s"		=> \$parameters{eemax},
	   "noconvert"		=> \$parameters{noconvert},
	   "itsx=s"		=> \$itsx{path},
	   "taxon_itsx=s"	=> \$itsx{taxon},
	   "region_itsx=s"	=> \$itsx{region},
	   "output_itsx=s"	=> \$itsx{output},
	   "threads=i"		=> \$threads,
	   "verbose"		=> \$verbose,
	   "debug"		=> \$debug,
	   "help"		=> \$help) or die "Error: Incorrect options, try \"$script --help\" for more information.\n";

# RUN HEADER

foreach my $line (split '\n',$title){
	print $line,"\n";
	usleep($timer);
}

print "\nWelcome. This is $script version $version, started at $timedate.\n";

print "$usage\n" and exit if($help);

if($debug){
	$verbose = 1;
	print "\n#### Running in debug mode ####\n\n"
}

print "\nChecking your parameters...\n" if $verbose;

# CHECK FOR INPUT FILES

if(scalar @ARGV == 0){
	if($debug){
		warn "No input files, running for debug purposes only. There may be errors.\n";
	} else {
		die "I need me some files to work on, see \"$script --help\" for more information\n";
	}
}

# CHECK TRIMMING

my $trimtool = "cutadapt";
die "Error: $trimtool not found, is it installed and in the PATH?\n" if(! which $trimtool);

print "DEBUG: primers hash:\n", Dumper \%primers if $debug;

if(defhash(\%{$primers{length}})){
	die "Error: please specify either primer lengths or primer sequences for trimming, not both, see \"$script --help\" for more information\n" if defhash(\%{$primers{sequence}});
	die "Error: you must specify the lengths of both forward and revers primers for length trimming, see \"$script --help\" for more information\n" unless ($primers{length}{forward} and $primers{length}{reverse});
	print "Warning: primer trimming based on length is less accurate than trimming based on sequence. If you have the sequences, I suggest you use them\n";
} elsif(defhash(\%{$primers{sequence}})){
	if($primers{sequence}{file}){
		die "Error: please specify either both primer sequences or the path to a file containing primer sequences, see \"$script --help\" for more information\n" if( $primers{sequence}{forward} or $primers{sequence}{reverse} );
		$primers{sequence}{forward} = line($primers{sequence}{file},1) or die "Error: cannot read or parse primer file\n";
		$primers{sequence}{reverse} = line($primers{sequence}{file},2) or die "Error: cannot read or parse primer file\n";
	} else {
		die "Error: please specify both forward and reverse primer sequences, see \"$script --help\" for more information\n" unless( $primers{sequence}{forward} and $primers{sequence}{reverse} );
	}
	print "Warning: you have not specified --stricttrim: reads with poor adapter matches will not be trimmed, but will be retained in the dataset. See \"$script --help\" for more information\n" unless $primers{sequence}{strict}
} else {
	die "Error: please specify some primer details, either lengths or sequences, see \"$script --help\" for more information\n";
}

# CHECK MERGING

my $mergetool = "pear";
die "Error: $mergetool not found, is it installed and in the PATH?\n" if(! which $mergetool);

die "Error: please specify --pearquality, see \"$script --help\" for more information\n" if(!defined $parameters{pearquality});

# CHECK FILTERING

my $filtertool = "usearch110";
if(!$parameters{noconvert}){
	die "Error: $filtertool not found, is it installed and in the PATH?\n" if(! which $filtertool);
	
	die "Error: please specify --eemax or --noconvert, see \"$script --help\" for more information\n" if(!defined $parameters{eemax});
	
	$parameters{noconvert} = "false";
} else {
	die "Error: cannot run ITSX if not converting reads to fasta\n" if(defhash(\%itsx));
	
	$parameters{noconvert} = "true";
	
	warn "Warning: values for eemax parameter are superfluous when not converting to fastq\n" if($parameters{eemax});
	$parameters{eemax} = "NA";
}

# CHECK ITSx

print "DEBUG: itsx hash:\n",Dumper\%itsx if $debug;


if($itsx{path} or $itsx{taxon} or $itsx{region} or $itsx{output}){
	my $curdir = cwd();
	die "Error: you do not have permission to write to the current directory, this will cause ITSx to fail\n" unless -w $curdir;
	die "Error: you must specify a path to HMMs using -itsx if you wish to use ITSx, see \"$script --help\" for more information\n" unless $itsx{path};
	die "Error: the path to HMMs that you have specified does not exist\n" unless (-e $itsx{path});
	die "Error: ITSx not found, is it installed and in the PATH?\n" if(! which "ITSx");
	
	# Set defaults
	
	$itsx{taxon}  = '.'           if( !$itsx{taxon}  );
	$itsx{output} = $itsx{region} if( !$itsx{output} );
	
	# Check region is acceptable
	my %permitted_regions = map { $_ => 1 } ("SSU","ITS1","5.8S","ITS2","LSU");
	die "Error: please specify a single accepted region (not 'all' or 'none') for -region_itsx, see \"$script --help\" for more information\n" unless $permitted_regions{$itsx{region}};
	
	# Check output is acceptable
	my %permitted_outputs = map { $_ => 1 } ("full", "partial", "complete");
	die "Error: please specify an acceptable output choice for -output_itsx, see \"$script --help\" for more information\n" unless $permitted_outputs{$itsx{output}};
}

# CHECK OUTPUT DIRECTORY

if(!defined $outpath){
	die "Error: output directory must be specified, see \"$script --help\" for more information\n";
} else {
	make_path($outpath);
}

# VERIFY AND PAIR INPUT FILES

print "\nChecking your files...\n" if $verbose;

my @files=@ARGV;

my %paired_files = find_pairs(@files);
my $n_file_pairs = keys %paired_files;

######################################################
# SET UP ITERATIONS
#

print "\nParsing iterations...\n" if $verbose;

print "DEBUG: Input parameters:\n",Dumper \%parameters if $debug;

my $iterations = parse_parameters(\%parameters,sort keys %paired_files);

print "DEBUG: Parsed iterations:\n", Dumper $iterations if $debug;

printf "\n$script will run %d iterations on each of %d file pairs\n", scalar keys %$iterations, scalar keys %paired_files;


######################################################
# RUN TRIMMING
#

make_path("$outpath/trim");

# INITIALISE FORKER AND VARIABLES

my $tpm = Parallel::ForkManager->new($threads);
my $done_trims=0;
my %trim_log;

# SET UP COMPLETION CLEANER

$tpm->run_on_finish( sub {
	my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;
	$done_trims++;
	printf "Completed trimming $done_trims/%d file pairs\r", scalar keys %paired_files;
	my $name = $data_structure_reference->{name};
	$trim_log{$name} = $data_structure_reference->{result};
});

# DO TRIMMING

printf "\nTrimming %d file pairs using $threads threads\n", scalar keys %paired_files if $verbose;

foreach my $name (keys %paired_files){
	my $pid = $tpm->start and next;
	
	my $out = trim($trimtool,\%paired_files,$name,\%primers,$outpath);
	
	$tpm->finish(0, {result => $out, name => $name});
}

# FINALISE

$tpm->wait_all_children;
print "\n";
print "DEBUG: trim log:\n", Dumper \%trim_log, "\n" if $debug;

######################################################
# RUN MERGING AND FILTERING
#

# INITIALISE FORKER AND VARIABLES

my $mpm = Parallel::ForkManager->new($threads);
my $done_iterations=0;
my %merge_log;
my $total =  (scalar keys %$iterations) * (scalar keys %paired_files);
my $it_threads = $threads/$total;
$it_threads = 1 if($it_threads < 1);

# SET UP COMPLETION CLEANER

$mpm->run_on_finish( sub {
	my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;
	$done_iterations++;
	print "Completed $done_iterations/$total merging and filtering iterations\r";
	my $iter = $data_structure_reference->{iter};
	my $name = $data_structure_reference->{name};
	$merge_log{$iter}{$name} = $data_structure_reference->{result};
});

# DO MERGING

printf "\nStarting %d merging iterations using $threads threads\n", scalar keys %$iterations if $verbose;

foreach my $iter (keys %$iterations){
	make_path("$outpath/merge_$iter","$outpath/filter_$iter");
	foreach my $name (keys %paired_files){
		my $pid = $mpm->start and next;
		
		my $out = merge_iteration($mergetool,$filtertool,$iterations,$iter,$name,$outpath,$it_threads);
		
		$mpm->finish(0, {result => $out, iter => $iter, name => $name});
	}
}

# FINALISE

$mpm->wait_all_children;
print "\n";
remove_tree("$outpath/trim") unless $debug;
print "DEBUG: merge log:\n", Dumper \%merge_log, "\n" if $debug;

######################################################
# RUN ITSx
#

my $itsx_log;

if(defhash(\%itsx)){
	print "\nFinding unique reads, running ITSx and filtering\n" if($debug or !$verbose);
	
	# RUN SUBROUTINE
	$itsx_log = run_itsx($outpath, $iterations, \%paired_files, \%itsx)
	
} else {
	
	# DO FINAL FILE MOVEMENT
	foreach my $iter (keys %$iterations){
		my $outdir = $outpath;
		if(scalar keys %$iterations > 1){
			$outdir .= "/NAPmerged_iteration$iter";
			make_path($outdir);
		}
		foreach my $name (keys %paired_files){
			${$itsx_log}{$iter}{$name} = "NA";
			move("$outpath/rename_$iter/$name.fa", "$outdir/$name.fa")
		}
		remove_tree("$outpath/rename_$iter") if !$debug;
	}
}

print "DEBUG: itsx log:\n", Dumper $itsx_log, "\n" if $debug;

######################################################
# DO LOG OUTPUT
#


#Do logging
open my $log, '>', "$outpath/merge.log.csv" or die "Error opening csv log for writing"; #open csv object for writing, and name

print $log join(',',('readname' , 'iteration' ,'Input_reads','Pairs_untrimmed_removed', 'pearquality' , 'pcA' , 'pcC' , 'pcG' , 'pcT' , 'uncalled_bases' , 'PEAR_total_reads' , 'PEAR_merged_reads' , 'PEAR_discarded_reads' , 'PEAR_not_merged_reads' ,'Max_expected_E-value', 'Filter_total_reads' , 'Filter_discarded' , 'Filter_converted','ITSx_detected')),"\n";

foreach my $iter (sort keys %$iterations){
	foreach my $name (sort keys %paired_files){
		print $log join(',', ($name,$iter,$trim_log{$name},$merge_log{$iter}{$name},${$itsx_log}{$iter}{$name})),"\n";
	}
}

close $log;

print "\nDone: CSV log of read processing written\n";

exit;

sub trim {
	# Load variables
	my ($trimtool,$pairs,$name,$primers,$outpath) = @_;
	my $cutspec;
	
	# Start log line
	my $log;
	
	# Create command
	if(defhash(${$primers}{length})){
		print "Trimming file pair $name based on primer lengths\n" if $verbose;
		$cutspec = "-u ${$primers}{length}{forward} -U ${$primers}{length}{reverse}";
	} else {
		print "Trimming file pair $name based on primer sequences\n" if $verbose;
		$cutspec = "-g ${$primers}{sequence}{forward} -G ${$primers}{sequence}{reverse}";
		$cutspec .= " --discard-untrimmed" if ${$primers}{sequence}{strict};
	}
	
	my $trim_cmd = "$trimtool $cutspec --minimum-length 1 --pair-filter any -o $outpath/trim/$name\_R1.fq -p $outpath/trim/$name\_R2.fq ${$pairs}{$name}[0] ${$pairs}{$name}[1]";
	
	# Run command
	print "DEBUG: $trimtool command:\n$trim_cmd\n" if $debug;
	
	my $trim_log = `$trim_cmd`;
	
	print "DEBUG: $trimtool log:\n$trim_log\n" if $debug;
	
	# Parse log
	$trim_log =~ /Total read pairs processed:[^\d]+(\d{1,3}(?:,\d{3})*)[^\d].*\(passing filters\):[^\d]+(\d{1,3}(?:,\d{3})*)[^\d]/s;
	my @trim_parse = ($1,$2);
	map { s/,//g; } @trim_parse;
	$trim_parse[1] = $trim_parse[0] - $trim_parse[1];
	$log = join ",",@trim_parse;
	
	# Finish
	return $log;
}

sub merge_iteration {
	# Load variables
	my ($mergetool, $filtertool, $iterations, $iter, $name, $outpath, $it_threads) = @_;
	
	# Start log line
	my $log = ${$iterations}{$iter}{pearquality};
	
	# MERGING
	
	print "Running $mergetool on file $name for iteration $iter with quality threshold ${$iterations}{$iter}{pearquality}\n" if $verbose;
	
	# Create command
	my $merge_cmd = "$mergetool -f $outpath/trim/$name\_R1.fq -r $outpath/trim/$name\_R2.fq -o $outpath/merge_$iter/$name -q ${$iterations}{$iter}{pearquality} -j $it_threads 2>/dev/null";
	
	# Run command
	print "DEBUG: $mergetool command:\n$merge_cmd\n" if $debug;
	
	my $merge_log = `$merge_cmd`;
	
	print "DEBUG: $mergetool log:\n$merge_log\n" if $debug;
	
	# Parse log
	$merge_log =~ /.*A:\s(\d.\d{6})\s*C:\s(\d.\d{6})\s*G:\s(\d.\d{6})\s*T:\s(\d.\d{6})\n\s*(\d*).*Assembled\sreads\s[\.]*:\s([\d|,]*)\s.*Discarded\sreads\s[\.]*:\s([\d|,]*)\s.*Not\sassembled\sreads\s[\.]*:\s([\d|,]*)\s\/\s([\d|,]*).*/s;
	
	my @merge_parse = ($1,$2,$3,$4,$5,$9,$6,$7,$8);
	foreach my $e (@merge_parse){
		$e =~ s/,//g;
		$log .= ",$e";
	}
	
	# FILTERING
	
	if (${$iterations}{$iter}{noconvert} eq "true"){
		
		# Do logging
		$log .= ",NA,NA,NA,NA\n";
		
		# Move results of merging to output directory
		my $outdir = $outpath;
		if(scalar keys %$iterations > 1){
			$outdir .= "/NAPmerged_iteration$iter";
			make_path($outdir);
		}
		move "$outpath/merge_$iter/$name.assembled.fastq", "$outdir/$name.fq";
		
	} else {
		make_path("$outpath/rename_$iter");
		
		print "Running $filtertool fastq_filter on file $name for iteration $iter with eemax ${$iterations}{$iter}{eemax}\n" if $verbose;
		
		# Do logging
		$log .= ",${$iterations}{$iter}{eemax}";
		
		# Create command
		my $filter_cmd = "$filtertool -fastq_filter $outpath/merge_$iter/$name.assembled.fastq -fastaout $outpath/filter_$iter/$name.fa -fastq_maxee ${$iterations}{$iter}{eemax} -threads $it_threads 2>&1 1>/dev/null";
		
		# Run command
		print "DEBUG: fastq_filter command:\n$filter_cmd\n" if $debug;
		my $filter_log = `$filter_cmd`; 
		
		print "DEBUG: fastq_filter log:\n$filter_log\n" if $debug;
		
		# Parse log
		$filter_log=~ /.*\s(\d*)\s\sReads.*\s(\d*)\s\sDiscarded.*\s(\d*)\s\sFiltered.*/s; #regex to extract data
		my @filter_parse = ($1,$2,$3);
		foreach my $e (@filter_parse){
			$e =~ s/,//g;
			$log .= ",$e";
		}
		
		# HEADER RENAMING
		my $readlabelcmd = "sed -e \"s/^>\\([^ ]*\\)\\(.*\\)/>\\1;barcodelabel=$name;/\" $outpath/filter_$iter/$name.fa > $outpath/rename_$iter/$name.fa"; #Append sample name to reads within paired read file. note the double escaping for sed expression within quoted string
		system($readlabelcmd);
		
	}
	
	remove_tree("$outpath/merge_$iter","$outpath/filter_$iter") unless $debug;
	
	# Finish
	return $log;
}

sub run_itsx{
	# Load variables
	my ($outpath, $iterations, $paired_files, $itsx) = @_;
	
	# Initialise log
	my %itsx_log;
	
	# Create directory for ITSx
	make_path("$outpath/itsx");
	
	# FIND UNIQUES
	
	# Work through all input sequences and find uniques
	
	print "\nFinding unique sequences in preparation for running ITSx\n" if $verbose;
	
	my %uniqueseqs;
	foreach my $iter (keys %$iterations){
		foreach my $name (keys %paired_files){
			# Read fasta
			my ($fasta, $lines) = read_fasta("$outpath/rename_$iter/$name.fa");
			write_fasta($fasta, "$outpath/rename_$iter/$name.fa") if($lines > scalar keys %$fasta); # Write unwrapped if wrapped
			printf "DEBUG: $name.fa has %d sequences\n", scalar keys %$fasta if $debug;
			# Add to unique hash
			@uniqueseqs{(values %$fasta)} = ();
		}
	}
	
	printf "DEBUG: read %d unique sequences\n", scalar keys %uniqueseqs if $debug;
	
	# Give each unique sequence a name
	@uniqueseqs{(keys %uniqueseqs)} = map { "seq".$_ } (1..scalar keys %uniqueseqs);
	
	# Write unique sequences to file
	open my $unout, '>', "$outpath/itsx/derep.fa" or die "Error: can't write to $outpath/itsx/derep.fa\n";
	foreach my $seq (keys %uniqueseqs){
		print $unout ">$uniqueseqs{$seq}\n$seq\n";
	}
	close $unout;
	
	# RUN ITSX
	
	print "Running ITSx\n" if $verbose;
	
	# Create command
	my $itsx_cmd = "ITSx -p ${$itsx}{path} -i $outpath/itsx/derep.fa -o $outpath/itsx/output -t ${$itsx}{taxon} --save_regions ${$itsx}{region} --preserve T --cpu $threads --graphical F --positions F --not_found F --truncate F --partial 1 2>&1";
	
	# Run command
	print "DEBUG: ITSx command:\n$itsx_cmd\n" if $debug;
	my $itsx_term = `$itsx_cmd`;
	print "DEBUG: ITSx terminal:\n$itsx_term\n" if $debug;
	
	# Set up which output file to use and read in
	my $itsxoutpath = "$outpath/itsx/output.${$itsx}{region}";
	$itsxoutpath .= ".full_and_partial" if(${$itsx}{output} eq "partial" or ${$itsx}{output} eq "full");
	$itsxoutpath .= ".fasta";
	
	my ($itsseqs, $lines) = read_fasta("$itsxoutpath");
	printf "DEBUG: selected ITSx output file $itsxoutpath has %d sequences\n", scalar keys %$itsseqs if $debug;
	
	# FILTER INPUT FILES
	
	print "ITSx complete, using outputs to filter your files\n" if $verbose;
	
	# Work through all input sequences and output those selected by ITSx
	foreach my $iter (keys %$iterations){
		# Set up final output directory
		my $outdir = $outpath;
		if(scalar keys %$iterations > 1){
			$outdir .= "/NAPmerged_iteration$iter";
			make_path($outdir);
		}
		# Loop through files for each iteration
		foreach my $name (keys %$paired_files){
			open my $fi, '<', "$outpath/rename_$iter/$name.fa" or die "Error: can't open $outpath/rename_$iter/$name.fa for reading\n";
			open my $fo, '>', "$outdir/$name.fa" or die "Error: can't open $outdir/$name.fa for writing\n";
			
			my $head;
			my $nseqs_passed;
			
			while(my $line = <$fi>){
				chomp $line;
				if($line =~ /^>/){
					$head = $line;
				} elsif(${$itsseqs}{$uniqueseqs{$line}}){ # Is the seqX header ($uniqueseqs{$line}) for this unique sequence ( $line ) in the headers of the ITSx output (keys %itsseqs)?
					$nseqs_passed++;
					
					if(${$itsx}{output} eq "full"){
						print $fo "$head\n$line\n";
					} else {
						print $fo "$head\n${$itsseqs}{$uniqueseqs{$line}}\n";
					}
				}
			}
			
			close $fi;
			close $fo;
			
			# Add record of pass number to log
			$itsx_log{$iter}{$name} = $nseqs_passed;
		}
		remove_tree("$outpath/rename_$iter") if !$debug;
	}
	
	remove_tree("$outpath/itsx") if !$debug;
	
	print "Completed ITSx filter\n" if $verbose;
	
	return \%itsx_log;
}

sub read_fasta{
	my ($file) = @_;
	
	my %fasta;
	my $head;
	my $lines;
	open my $fa, '<', $file or die "Error: can't open $file for reading\n";
	while(my $line = <$fa>){
		chomp $line;
		if($line =~ /^>(.+)$/){
			$head = $1;
		} else {
			$fasta{$head} .= $line;
		}
		$lines++;
	}
	close $fa;
	return (\%fasta, $lines);
}

sub write_fasta{
	my ($fasta, $file) = @_;
	
	open my $fa, '>', $file or die "Error: can't open $file for writing\n";
	foreach my $head (keys %$fasta){
		print $fa ">$head\n${$fasta}{$head}\n";
	}
	close $fa;
	return;
}

sub parse_parameters {
	my ($inparams,@names) = @_;
	my @itarray;
	my @paramarray;
#	push @paramarray, "name";
#	push @itarray, \@names;
	foreach my $param (keys %$inparams){
		push @paramarray, $param;
		if ($inparams->{$param} =~ /^(\d+(\.\d+)?)-(\d+(\.\d+)?),(\d+(\.\d+)?)$/ ){
			my @values;
			my $curmax = $1;
			while ($curmax <= $3){
				push @values, $curmax;
				$curmax += $5;
			}
			push @itarray, \@values;
		} elsif($inparams->{$param} =~ /^[a-zA-Z]+(?:,[a-zA-Z]+)+$/){
			my @values = split ',',$inparams->{$param};
			push @itarray, \@values;
		} elsif($inparams->{$param} =~ /^[a-zA-Z]+$|^\d+(\.\d+)?$/){
			push @itarray, [$inparams->{$param}];
		} else {
			die "Could not successfully parse string given for $param\n";
		}
	}
	my @allarray;
	
	NestedLoops(\@itarray, sub {push @allarray, [ @_ ]});
	
	my %iterhash;
	foreach my $it (0 .. $#allarray){
		$iterhash{$it+1} = {map { $paramarray[$_] => $allarray[$it][$_] } 0..$#paramarray};
	}
	return \%iterhash;
}

sub line {
	my ($path,$line) = @_;
	open my $fh, '<', $path;
	while (<$fh>) {
		chomp $_;
		return $_ if $. == $line;
	}
}

sub find_pairs {
	my @allfiles = @_;
	my %filepairs;
	foreach my $file (@allfiles){
	    my ($file_name,$dir)=fileparse($file);
	    if($file_name =~ /(.+)_R([1|2])/){
		$filepairs{$1}[$2-1]=$file;
	    }else{
		die "Input file $file does not contain '_R1' or '_R2' in name";
	    }
	}
	return %filepairs;
}

sub defhash{
	my ($hash) = @_;
	return any { defined ${$hash}{$_} } keys %{$hash};
}

sub timestamp{
my @time = localtime;
return sprintf "%02d:%02d:%02d",$time[2],$time[1],$time[0];
}

sub datestamp{
my @time = localtime;
return sprintf "%04d-%02d-%02d",$time[5]+1900,$time[4]+1,$time[3];
}
