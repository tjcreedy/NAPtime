#!/usr/bin/env perl
#By Thomas J Creedy, thomas@tjcreedy.co.uk

use warnings;
use strict;
use Getopt::Long;
use File::Basename;
use File::Path qw(make_path remove_tree);
use File::Which;
use List::Util qw(sum all any min max); 
use List::MoreUtils qw(pairwise);
use Algorithm::Loops qw(NestedLoops);
use POSIX;
use LWP::Simple;
#use LWP;
use Parallel::ForkManager;
use Sys::Hostname;
use Time::HiRes qw(usleep);
use Data::Dumper;


########################################################
# INITIALISE VARIABLES AND SET DEFAULTS
#

my $version = "0.7.0"; #05/03/2019
my $help;
my $outpath;
my %parameters = (
	minsize			=> 2,
	bootstraps		=> 10000,
	blasthits		=> 100,
	blastthreshold		=> 0.2,
	pvalue			=> 0,
	pvalue_maxthreshold	=> 0.5,
	identity		=> 0.99,
	maxgroupscheck		=> 10,
	var_by_codon		=> 'x',
	pc_var			=> 'NA',
	base_var		=> 'NA',
	codon_var		=> 'NA',
	minlength		=> 'NA',
	maxlength		=> 'NA',
);

#my $display = "groups";
#my $browser = LWP::UserAgent->new;
our $blastskip;
our $threads = 1;
our $blastpath;
our $verbose;
our $debug;

my $script = basename($0,());

# CREATE HELPFILE

my $usage =<<USAGE;

Description:

	This is $script version $version of the NGS Amplicon Pipeline. It carries out either barcode selection or clustering of one or several fastas. When selecting barcodes, there are three modes: viewing statistics for a single file, running one or several files in batch mode with a set of parameters, or iterating through range(s) of parameter(s) to explore parameter space. Clustering only has the latter two modes.
	
	For more details, see the github wiki at https://github.com/tjcreedy/NAPtime/wiki/NAPselect.
	
USAGE

# SET UP HEADER

my $timedate = timestamp()." ".datestamp();
my $timer = "100000";
my $title =<<TITLE;
  _   _          _____  _   _                 
 | \\ | |   /\\   |  __ \\| | (_)                
 |  \\| |  /  \\  | |__) | |_ _ _ __ ___   ___  
 | . ` | / /\\ \\ |  ___/| __| | '_ ` _ \\ / _ \\ 
 | |\\  |/ ____ \\| |    | |_| | | | | | |  __/ 
 |_| \\_/_/    \\_\\_|     \\__|_|_| |_| |_|\\___| 
TITLE

######################################################
# GET INPUTS AND PARSE
#

GetOptions("output=s"		=> \$outpath,
	   "seqlength=i"	=> \$parameters{seqlength},
	   "pc_var=s"		=> \$parameters{pc_var},
	   "base_var=s"		=> \$parameters{base_var},
	   "codon_var=s"	=> \$parameters{codon_var},
	   "minlength=s"	=> \$parameters{minlength},
	   "maxlength=s"	=> \$parameters{maxlength},
	   "var_by_codon:s"	=> \$parameters{var_by_codon},
	   "minsize=s"		=> \$parameters{minsize},
	   "bootstraps=s"	=> \$parameters{bootstraps},
	   "blasthits=s"	=> \$parameters{blasthits},
	   "blasttarget=s"	=> \$parameters{blasttarget},
	   "blastthreshold=s"	=> \$parameters{blastthreshold},
	   "blastid=s"		=> \$parameters{blastid},
	   "pvalue=s"		=> \$parameters{pvalue},
	   "threshold_pvalue=f"	=> \$parameters{pvalue_maxthreshold},
	   "identitypc=s"	=> \$parameters{identity},
	   "maxgroupscheck=i"	=> \$parameters{maxgroupscheck},
	   "skipblast"		=> \$blastskip,
	   "threads=i"		=> \$threads,
	   "blastpath=s"	=> \$blastpath,
	   "verbose"		=> \$verbose,
	   "debug"		=> \$debug,
	   "help"		=> \$help) or die "Error: Incorrect options, try \"$script --help\" for more information.\n";

# RUN HEADER

foreach my $line (split '\n',$title){
	print $line,"\n";
	usleep($timer);
}

print "\nWelcome. This is $script version $version, started at $timedate.\n";

print "$usage\n" and exit if($help);

if($debug){
	$verbose = 1;
	print "\n#### Running in debug mode ####\n\n";
	$parameters{bootstraps} = 10;
	$parameters{blasthits} = 10;
	print "Debug mode has reset the number of bootstraps and blasthits to 10\n";
}

print "\nChecking your parameters...\n" if $verbose;

# CHECK FOR INPUT FILES

if(scalar @ARGV == 0){
	if($debug){
		warn "No input files, running for debug purposes only. There may be errors.\n";
	} else {
		die "I need me some files to work on, see \"$script --help\" for more information\n";
	}
}

my @files=@ARGV;

# CHECK LENGTH FILTERING

die "Error: sequence length must be specified\n" unless $parameters{seqlength};

# CHECK BLAST

my $blastthreads = 1;
if($blastskip){
	die "Error: path to BLAST database or BLAST target specified, but you have select to skip BLASTing\n" if($blastpath or $parameters{blasttarget});
	print "You have chosen to skip BLASTing during filtering. NAPselect will not be as efficient (but will be faster!)\n" if $blastskip;
	@parameters{('blasthits','blastthreshold')} = (0, 0);
} else {
	# Check for BLAST installation
	die "Error: blastn could not be found, is it installed and in the PATH?\n" if(! which "blastn");
	
	# Set up BLASTdb
	if(! $blastpath){
		my $host = hostname;
		my %paths = (
			'ctag' => '/db/db/blastdb-2018-06-17/nt',
			'hpc-watson' => '/db/blastdb-2018-06-17/nt',
			'hpc-crick' => '/db/blastdb-2018-06-17/nt'
		);
		if(exists($paths{$host})){
			$blastpath = $paths{$host};
		} else {
			die "Error: no path to BLAST database found, please give me one using --blastpath <path>\n";
		}
	}
	
	# Check type of BLASTdb
	my $blastdbinfo = `blastdbcmd -db $blastpath -info`;
	my $blastdbname = ($blastdbinfo =~ /^Database: (.+)$/m)[0];
	print "DEBUG: blastdbinfo:\n$blastdbinfo\n	blastdbname:\n$blastdbname\n" if $debug;
	if($blastdbname eq "Nucleotide collection (nt)"){
		die "Error, BLAST target must be specified\n" if(! $parameters{blasttarget});
		print "Using Genbank $blastdbname database for taxonomic identification of sequences\n" if $verbose;
		$parameters{blasthits} = 0 unless $parameters{blasthits};
	} else {
		die "Error: custom blast database selected but BLAST target specified, custom databases cannot be parsed for taxonomy information\n	(If this is in error, let Thomas know)\n" if $parameters{blasttarget};
		print "Using custom blast database $blastdbname, taxonomic identification will not be performed and sequences will be selected based on hit rate to $blastdbname\n" if $verbose;
		$parameters{blasthist} = 97 unless $parameters{blasthits};
		$parameters{customdb} = 1;
		$parameters{blasttarget} = 0;
	}
	
	#Set BLAST threads
	$blastthreads = floor($threads /scalar @files) if(scalar @files < $threads)
}

# CHECK OUTPUT DIRECTORY

if(!defined $outpath){
	die "Error: output directory must be specified, see \"$script --help\" for more information\n";
} else {
	print "Creating output directory if needed\n" if $verbose;
	$outpath =~ s/\/$//;
	make_path($outpath);
}

# CHECK BOOLEAN INPUTS

foreach my $par ('var_by_codon'){
	$parameters{$par} = 1 if !$parameters{$par};
	$parameters{$par} = 'NA' if $parameters{$par} eq 'x';
}

######################################################
# SET UP ITERATIONS
#

print "\nParsing iterations...\n" if $verbose;

print "DEBUG: Input parameters:\n",Dumper \%parameters if $debug;

my ($iterations, $expand_parameters, $removed) = parse_parameters(\%parameters);

my $anyremoved;
$anyremoved = 1 if exists(${$removed}{red}) or exists(${$removed}{lerr});

print "DEBUG: expanded parameter arrays hash follows:\n", Dumper $expand_parameters if $debug;

print "DEBUG: parsed iteration hash follows:\n", Dumper $iterations if $debug;

print "DEBUG: removed hash follows:\n", Dumper $removed if $debug and $anyremoved;

# SECOND INPUT PARSE

my $batch = sum ( map { scalar @{${$expand_parameters}{$_}} } keys %$expand_parameters );
$batch = $batch / scalar keys %$expand_parameters;

print "DEBUG: batch value is $batch\n" if $debug;

if(scalar keys %$iterations == 0){
	if(exists(${$removed}{lerr})){
		die "Error: please use only one of -pc_var, -base_var or -codon_var, or one or both of -minlength and -maxlength\n" if $batch == 1;
		die "Error: all supplied length specification combinations were incompatible. You should add 'NA' to some or all of the ranges for the length specification combinations\n" if $batch > 1;
	} else {
	die "Error: only incompatible specifications remain. Check your inputs\n";
	}
}

printf "Parsed inputs generated %d iterations %s\n", scalar keys %$iterations, $anyremoved ? "after removal of:" : "" if $verbose;
print "	${$removed}{redclus} iterations with redundant parameter combinations\n" if($verbose and ${$removed}{red});
print "	${$removed}{redl} iterations with erroneous length specifications\n" if($verbose and ${$removed}{lerr});

######################################################
# SET UP LOGGING
#

my @params = sort keys %parameters;

my %log;

my %stats = (
	general => ['filename','sequences','iteration','unique_sequences','freq_discarded','length_discarded','unique_remain'],
	group   => ['mean_copies','stdev_copies','min_copies','max_copies','max_copies_pc'],
	filter  => ['filteroutcome','bootstrap_pvalue','n_uniques_pooled','selected_rank','pooled_copies'],
);


######################################################
# RUN GROUPING AND FILTERING
#

# ITITIALISE FORKER AND VARIABLES

my $pm = Parallel::ForkManager->new($threads);
my $done_iterations;

# SET UP COMPLETION CLEANER

$pm->run_on_finish( sub {
	my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;
	$done_iterations++;
	printf "Completed $done_iterations/%d total iterations\r",(scalar keys %$iterations)*(scalar @files) unless $verbose;
	
	my $iter = $data_structure_reference->{iter};
	my $file = $data_structure_reference->{file};
	$log{$iter}{$file} = $data_structure_reference->{result};
});

# DO DEREPLICATION, FILTERING AND SELECTION

printf "\nStarting %d filtering iterations using $threads threads:\n", (scalar keys %$iterations)*(scalar @files);

foreach my $file (@files){
	foreach my $iter (keys %$iterations){;
		my $pid = $pm->start and next;
		
		my $out = read_derep_filter_select($file,$iterations,$iter,$blastthreads,\@params,\%stats);
		
		$pm->finish(0, {result => $out, iter => $iter, file => $file});
	}
}

# FINALISE

$pm->wait_all_children;
print "\n" unless $verbose;

######################################################
# PRODUCE OUTPUT LOGS
#

# Open log file and start printing

open my $logcsv, '>', "$outpath/select.log.csv";
my @head = (@{$stats{general}},@params,@{$stats{group}},@{$stats{filter}});
print $logcsv join(',',@head);

# LOOP ON ITERATION

foreach my $iter (keys %log){
	
	# Open output files
	
	open my $outhighfa, '>', "$outpath/select.sequences.highconfidence_iteration$iter.fa";
	open my $outlowfa, '>', "$outpath/select.sequences.lowconfidence_iteration$iter.fa";
	
#	# Check for successes
#	
#	map { $highsuccesses++ if $log{$_}{filteroutcome} eq "high confidence" } keys %log;
#	map { $lowsuccesses++ if $log{$_}{filteroutcome} eq "low confidence" } keys %log;
#	
	# Print to output files
	
	foreach my $file (@files){
		print $logcsv "\n",join(',',@{$log{$iter}{$file}}{@head});
		print $outhighfa ">$log{$iter}{$file}{filename}\n$log{$iter}{$file}{sequence}\n" if($log{$iter}{$file}{filteroutcome} eq 'high confidence');
		print $outlowfa ">$log{$iter}{$file}{filename}\n$log{$iter}{$file}{sequence}\n" if($log{$iter}{$file}{filteroutcome} eq 'low confidence');
	}
	
	# Close output files
	close $outhighfa;
	close $outlowfa;
}

# Close log file

close $logcsv;
print "\nCSV log successfully written to $outpath/select.log.csv\n";

print "\n";

exit;

sub timestamp{
my @time = localtime;
return sprintf "%02d:%02d:%02d",$time[2],$time[1],$time[0];
}

sub read_derep_filter_select{
	
	# Load variables
	my ($file,$iterations,$iter,$blastthreads,$params,$stats) = @_;
	
	my %log;
	my $n_iter = scalar keys %$iterations;
	
	# READ FASTA
	
	my %fasta = read_fasta($file);
	my ($name,$dir)=fileparse($file);
	$name =~ s/^(.+)\.[^\.]+$/$1/;
	
	warn "Warning: file $name is empty!\n" if(scalar keys %fasta < 1);
	
	printf "%s: starting parameter iteration $iter of %d for $name with pid $$\n", timestamp(), $n_iter if($verbose and $n_iter>0);
	my $printstring = join "", ($threads>1 and ($n_iter>0 or $#files>0)) ? "pid $$ " : "", $name, $n_iter>1 ? " iteration $iter" : "";
	
	# DEREPLICATION AND FILTERING
	
	# Prepare for length filtering
	
	my ($seql, $minl, $maxl, $cvar) = (${$iterations}{$iter}{seqlength}, ${$iterations}{$iter}{minlength}, ${$iterations}{$iter}{maxlength}, ${$iterations}{$iter}{var_by_codon});
	my $nex = ($minl ne 'NA') + ($maxl ne 'NA') + ($cvar ne 'NA');
	
	# Print message
	
	print timestamp(),": $printstring dereplicating" if $verbose; 
	if($nex > 0){
		print " and filtering out sequences";
		if($minl){
			print " shorter than $minl";
			print "," if $nex == 3;
			print " and" if $nex == 2;
		}
		if($maxl){
			print " longer than $maxl";
			print " and" if $cvar ne 'NA';
		}
		print " not a multiple of 3 bases less or more than $seql" if $cvar ne 'NA';
	}
	print "\n";
	
	# Do derep
	my %dereplicated;
	
	foreach my $id (keys %fasta){
		$dereplicated{$fasta{$id}}++;
	}
	
	my $nunique = scalar keys %dereplicated;
	
	printf "%s: $printstring dereplicated %d sequences into $nunique uniques\n",  timestamp(), scalar keys %fasta if $verbose;
	
	# Do size filter
	
	foreach my $seq(keys %dereplicated){
		delete $dereplicated{$seq} if $dereplicated{$seq} < ${$iterations}{$iter}{minsize};
	}
	
	my $minfreq_discarded = $nunique - scalar keys %dereplicated;
	
	print timestamp(), ": $printstring $minfreq_discarded unique sequences discarded for having fewer than ${$iterations}{$iter}{minsize} copies\n" if $verbose;
	
	# Do length filter
	
	my $length_passed = 0;
	
	foreach my $seq (keys %dereplicated){
		my $curlen = length($seq);
		
		if((($minl ne 'NA' and $curlen >= $minl) or $minl eq 'NA') and 
		   (($maxl ne 'NA' and $curlen <= $maxl) or $maxl eq 'NA')){
			
			if((($cvar ne 'NA' and (($curlen - $seql) % 3) == 0) or $cvar eq 'NA')){
				$length_passed++;
			} else {
				delete $dereplicated{$seq};
			}
			
		} else {
			delete $dereplicated{$seq};
		}
	}
	
	my $length_discarded = $nunique - $minfreq_discarded - $length_passed;
	
	print timestamp(),": $printstring $length_discarded unique sequences removed for failing length criteria\n" if $verbose;
	
	# DO SELECTION PROCESS
	
	printf "%s: $printstring processing %d unique sequences to designate selected sequence\n", timestamp(), scalar keys %dereplicated if $verbose;
	
	my ($selectseq, $selectlog) = select_sequence(\%dereplicated, ${$iterations}{$iter}, $stats{filter}, $blastthreads, $printstring);
	
	# Do logging
	my @frequencies = values %dereplicated;
	
	@log{@{${$stats}{general}}} = ($name, scalar keys %fasta, $iter, $nunique, $minfreq_discarded, $length_discarded, scalar keys %dereplicated);
	@log{@{${$stats}{group}}} = scalar keys %dereplicated > 0 ?
							(sum(@frequencies)/scalar @frequencies,
							 stdev(@frequencies),
							 min(@frequencies),
							 max(@frequencies),
							 max(@frequencies)/scalar @frequencies) 
								  : 
							 ((0) x 5);
	@log{@{${$stats}{filter}}} = @{$selectlog}{@{${$stats}{filter}}};
	@log{@$params} = @{${$iterations}{$iter}}{@$params};
	
	# Finalise and output
	
	if ($selectseq){
		print timestamp(),": $printstring sequence selected\n" if $verbose;
		$log{sequence} = $selectseq;
	} else {
		print timestamp(),": $printstring no sequence could be selected, see log for details\n" if $verbose;
		$log{sequence} = "";
	}
	
	return \%log;
}

sub select_sequence{
	# Load variables
	my ($uniques,$specs,$loghead,$blastthreads,$printstring) = @_;
	
	my %log;
	
	# SORT BY LENGTH
	
	my @sorted_seq = sort { ${$uniques}{$a} <=> ${$uniques}{$b} } keys %$uniques;
	my @sorted_size = @{$uniques}{@sorted_seq};
	
	my $topseq = $sorted_seq[0];
	my $topsize = $sorted_size[0];
	
	# START SELECTION
	
	print timestamp(),": $printstring initiating selection with most abundant unique sequence\n" if $verbose;
	
	my $selection=1;
	my $uniquespooled=0;
	my $confidence;
	my $bootstrapskip;
	my $selectedseq;
	
	while(1){
		my $blastfail;
		
		printf "%s: $printstring assessing sequence $selection%s\n", timestamp(), $uniquespooled>0 ? "($uniquespooled copies)":"" if $verbose;
		
		if (!@sorted_seq){
			print timestamp(),": $printstring no sequences passed filtering parameters, entire sample discarded\n";
			@log{@$loghead} = ('nosequences',("NA") x 3,0);
			last;
		}
		
		my $pvalue;
		
		# STEP 1: DO BOOTSTRAPPING TO ASSESS CONFIDENCE
		
		if(!$bootstrapskip){
			# Bootstrap
			printf "%s: $printstring running ${$specs}{bootstraps} bootstraps placing %d sequences randomly into %d uniques to find probability of sequences with %d copies\n", timestamp(), sum(@sorted_size),scalar @sorted_size, max(@sorted_size), if $verbose;
			
			$pvalue = bootstrap(${$specs}{bootstraps}, \@sorted_size);
			
			print timestamp(),": $printstring bootstrap value $pvalue against ${$specs}{pvalue} (max ${$specs}{pvalue_maxthreshold})\n" if $verbose;
			
			if($pvalue >= ${$specs}{pvalue_maxthreshold}){
				
				# Absolutely no significance, no point in trying to (further) group by similarity
				
				#@log{@$loghead} = ('exceeded_max_pvalue','NA',$pvalue,$uniquespooled,$selection,$stat_sorted[0]);
				print timestamp(),": $printstring sequence $selection exceeded maximum pvalue. The most frequent sequence will be considered with low confidence\n" if $verbose;
				$confidence = "low";
			} elsif($pvalue <= ${$specs}{pvalue}){
				
				# Significantly distinct
				print timestamp(),": $printstring sequence $selection significantly distinct. This sequence will be considered with high confidence\n" if $verbose;
				$confidence = "high";
				
			}
		}
		
		# STEP 2: DO BLASTING TO ASSESS TAXONOMY
		
		my $blastq;
		my $blastz;
		my $select_rank;
		
		if($confidence eq "high"){
			$blastq = $sorted_seq[0];
			$blastz = $sorted_size[0];
			$select_rank = $selection;
		} else {
			$blastq = $topseq;
			$blastz = $topsize;
			$select_rank = 1;
		}
		if($confidence){
			if($blastskip){
				print timestamp(),": $printstring skipping BLAST step and just outputting sequence $select_rank\n" if $verbose;
				@log{@$loghead} = ("$confidence confidence",$pvalue,$uniquespooled,$select_rank,$blastz);
				last;
			} else{
				
				if(${$specs}{customdb}){
					print timestamp(),": $printstring BLASTing with $blastthreads threads against custom database to check if any hits at ${$specs}{blastid}% similarity\n" if $verbose;
					
					my $blastdump = doblast($blastq, $specs, $blastthreads);
					
					$blastfail = 1 if !$blastdump;
				} else {
					print timestamp(),": $printstring BLASTing with $blastthreads threads for best-guess taxonomy to check against target \"${$specs}{blasttarget}\"\n" if $verbose;
					
					my @blastbestguess = taxonomyblast($blastq,$specs,$blastthreads);
					my %blast;
					if(!@blastbestguess){
						print timestamp(),": $printstring WARNING: could not retrieve a BLAST taxonomy, BLAST likely failed all 5 tries OR only one hit was returned. Treating as if this sequence has failed.\n";
						$blastfail = 1;
					} else {
						print timestamp(),": $printstring retrieved taxonomy\n" if $verbose;
						%blast = map { $_ => 1} @blastbestguess;
					}
					
					$blastfail = 1 if !$blast{${$specs}{blasttarget}};
				}
				
				if(! $blastfail){
					@log{@$loghead} = ("$confidence confidence",$pvalue,$uniquespooled,$select_rank,$blastz);
					print timestamp(),": $printstring sequence $select_rank passed BLAST filter, done with $confidence confidence\n" if $verbose;
					$selectedseq = $blastq;
					last;
				} else {
					print timestamp(),": $printstring sequence $select_rank failed BLAST filter, attempting to move on to other sequences\n" if $verbose;
				}
			}
		}
		
		# STEP 4: MERGE SEQUENCES IF NECESSARY
		
		if(($pvalue < ${$specs}{pvalue_maxthreshold} and $pvalue > ${$specs}{pvalue}) or $blastfail){
			
			# First check if more than one group left or if we've already discarded too many groups
			if(scalar @sorted_seq == 1 or $selection >= ${$specs}{maxgroupscheck}){  
				if($blastfail and scalar @sorted_seq == 1){
					print timestamp(),": $printstring sequence $selection not sufficiently similar to target taxon. No further sequences exist. No selection can be made.\n" if $verbose;
					@log{@$loghead} = ('groups_exhausted',$pvalue,$uniquespooled,$selection,$sorted_size[0]);
					last;
				} elsif($blastfail and $selection >= ${$specs}{maxgroupscheck}){
					print timestamp(),": $printstring sequence $selection not sufficiently similar to target taxon. Reached maximum sequences to check threshold. No selection can be made.\n" if $verbose;
					@log{@$loghead} = ('max_groups_reached',$pvalue,$uniquespooled,$selection,$sorted_size[0]);
					last;
				} else {
					print timestamp(),": $printstring sequence $selection not sufficiently distinct and/or no further sequences exist. The most frequent sequence will be considered, but will be written to lowconfidence output.\n" if $verbose;
					$confidence = "low";
					$bootstrapskip = 1;
					continue;
				}
			}
			
			print timestamp(),": $printstring sequence $selection did not pass. Checking similarity to next most abundant sequence to see if pooling sequences is appropriate\n" if $verbose;
			
			#Calculate similarity
			
			my $muscle = `printf \">".$sorted_size[0]."\\n".$sorted_seq[0]."\\n>".$sorted_size[1]."\\n".$sorted_seq[1]."\\n\" | muscle 2> /dev/null`;
			my @muscleout = split("\n",$muscle);
			my $pc_id = identity($muscleout[1],$muscleout[3]);
			
			print timestamp(),": $printstring sequences are $pc_id identical, against criterion of ${$specs}{identity}\n" if $verbose;
			
			#Check similarity
			
			if ($pc_id >= ${$specs}{identity}) {
				print timestamp(),": $printstring sequences are similar enough, pooling together and starting again with the pooled sequence...\n" if $verbose;
				my $maxsize = shift @sorted_size;
				my $maxseq = shift @sorted_seq;
				$sorted_size[0] += $maxsize;
				$sorted_seq[0] = $maxseq;
				$uniquespooled++;
			} else {
				print timestamp(),": $printstring sequence are not similar enough, discarding sequence $selection and starting again with next-largest group...\n" if $verbose;
				shift @sorted_seq;
				shift @sorted_size;
				$selection += 1;
				$uniquespooled = 0;
			}
		
		# RESTART WITH MERGED SEQUENCES
		
		}
		
	}
	return($selectedseq, \%log)
}

sub bootstrap{
	my ($boots, $values) = @_;
	my $max = max(@$values);
	my $ngroups = scalar @$values;
	my $nseqs = sum(@$values);
	print "Bootstrapping debug - passed values: $boots bootstraps on $ngroups groups sorting $nseqs sequences to find null probability of a group with $max sequences\n" if $debug;
	my $nsuccesses = 0;
	foreach (1..$boots) {
		my %grp;
		$grp{int(rand($ngroups))+1}++ foreach (1..$nseqs);
		$nsuccesses++ if(max(values %grp) > $max);
		#print "Bootstrapping results:\n" if $debug;
		#print Dumper \%grp if $debug; 
		print "Number of successes = $nsuccesses\n" if $debug;
	}
	return $nsuccesses/$boots;
}

sub doblast{
	my ($seq,$parameters,$blastthreads) = @_;
	
	# Set up command
	my $blastcmd = "blastn -query <(echo -e \">sample\\n$seq\") -db $blastpath -num_threads $blastthreads -max_target_seqs $parameters{blasthits} -perc_identity $parameters{blastid} -outfmt \"6 sacc bitscore\"";
	print "BLAST command:\n$blastcmd\n" if $debug;
	
	# Do BLASTing
	
	my $blastdump;
	my $blasttries = 0;
	while(!$blastdump && $blasttries<5){
		$blastdump = qx(bash -c '$blastcmd');
		$blasttries++;
		print "BLAST attempt $blasttries\n" if $debug;
	}
	
	return($blastdump);
}

sub taxonomyblast{
	# Load data
	
	my ($seq,$parameters,$blastthreads) = @_;
	
	my $blastdump = doblast($seq, $parameters, $blastthreads);
	
	# PARSE BLAST DATA
	
	my @out;
	if($blastdump){
		print "BLAST successfully output data.\n";
		
		# Parse accessions
		my @accessions = ($blastdump =~ /(?:^|\n)(\w+)/g);
		my $accessionstring = join ",",@accessions;
		my $naccessions = scalar @accessions;
		print "$naccessions accessions recovered:\n$accessionstring\n" if $debug;
		
		# Retrieve NCBI data
		if($naccessions>1){
			# Retrieve taxid data
			
			my $url  = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=$accessionstring&retmode=xml&rettype=fasta";
			print "EUTILS url:\n$url\n" if $debug;
			my $nucdump = get($url) or die "Error: failed to recover taxonomy information for accessions from NCBI";
			#my $url_pull = $browser->get($url);
			#print Dumper $url_pull;
			
			# Parse out taxids
			
			#my $nucdump = $url_pull->content;
			print $nucdump;
			my $taxidstring = join ",",($nucdump =~ /<TSeq_taxid>(.*)<\/TSeq_taxid/g);
	#		print $taxidstring,"\n";
			print "Taxids recovered:\n$taxidstring\n" if $debug;
			
			# Retrieve taxonomy data
			
			my $taxdump = get("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=taxonomy&id=$taxidstring");
			
			# Parse out lineages
			my @lineages = ($taxdump =~ /<Lineage>(.*)<\/Lineage>/g);
			printf "%d lineages recovered:\n%s\n", scalar @lineages,join("\n",@lineages) if $debug;
			my @linaoa;
			foreach my $i (0..$#lineages){
				$linaoa[$i] = [ split /;\s/,$lineages[$i] ];
			}
			
			# Score lineages
			
			print "Filtering lineages against blastthreshold ${$parameters}{blastthreshold}\n" if $debug;
			my $ti = -1;
			my @htind = (1..$#linaoa);
			while($ti < scalar @{$linaoa[0]}-1){
				$ti++;
				printf "Taxon level $ti, comparing %d lineages against best hit taxon %s\n", scalar @htind, $linaoa[0][$ti] if $debug;
				@htind = grep { $linaoa[$_][$ti] =~ $linaoa[0][$ti] } @htind;
				printf "%d lineages match to %s, score %d/%d versus ${$parameters}{blastthreshold}\n", scalar @htind, $linaoa[0][$ti], scalar @htind, $#linaoa if $debug;
				$ti-- and last if((scalar @htind)/$#linaoa <= ${$parameters}{blastthreshold});
			}
			@out = @{$linaoa[0]}[0..$ti];
		}
	}
	return @out;
}

sub stdev {
	my @data = @_;
	my $mean = sum(@data)/@data;
	my @deviations = map { ($_-$mean)**2 } @data;
	return sqrt( sum(@deviations)/@deviations );
}

sub parse_parameters {
	
	# READ INPUTS AND INITIALISE
	
	my ($inparams) = @_;
	my %param_expand;
	my @paramarray;
	
	# EXPAND PARAMETER RANGES TO CREATE HASH OF ARRAYS
	
	foreach my $param (keys %$inparams){
		# Add parameter name to array of parameter names
		push @paramarray,$param;
		
		# Parse parameter values
		if(!$inparams->{$param}){
			$param_expand{$param} = [$inparams->{$param}];
		} elsif ($inparams->{$param} =~ /[,-\/]/ ){
			my @parts = split ',', $inparams->{$param}; 
			my @values;
			my @strings;
			foreach my $part (@parts){
				if($part =~ /^(\d+(\.\d+)?)-(\d+(\.\d+)?)\/(\d+(\.\d+)?)$/){
					my $curmax = $1;
					while ($curmax <= $3){
						push @values, $curmax;
						$curmax += $5;
					}
				} elsif($part =~ /^\d+(?:\.\d+)?$/) {
					push @values, $part;
				} elsif($part =~ /^([A-Za-z]+)$/){
					push @strings, $part;
				} else {
					die "Could not successfully parse string given for $param\n";
				}
			}
			my @sortvalues = sort {$a <=> $b} @values;
			push @strings, @sortvalues;
			$param_expand{$param} = \@strings;
		} elsif($inparams->{$param} eq 'both'){
			$param_expand{$param} = [1, 0];
		} elsif($inparams->{$param} =~ /^[a-zA-Z]+$|^\d+(\.\d+)?$/){
			$param_expand{$param} = [$inparams->{$param}];
		} else {
			die "Could not successfully parse string given for $param\n";
		}
		print "Complete value list for $param: ", Dumper \@{$param_expand{$param}} if $debug;
	}
	
	# CREATE ARRAY OF ARRAYS CONTAINING ALL COMBINATIONS OF VALUES
	
	my @allarray;
	NestedLoops([@param_expand{@paramarray}], sub {push @allarray, [ @_ ]});
	
	undef %param_expand;
	
	# PARSE EACH COMBINATION OF VALUES TO ENSURE VALID AND FINALISE LENGTH
	
	my %removed;
	my %iterhash;
	my %itcompare;
	my %lcompare;
	my @uniquelparam;
	
	foreach my $it (1 .. scalar @allarray){
		# Create hash for combination and put into hash of hashes
		$iterhash{$it} = {map { $paramarray[$_] => $allarray[$it-1][$_] } 0..$#paramarray};
		
		print "DEBUG: prefiltered iteration $it is:\n", Dumper $iterhash{$it} if $debug;
		
		# Set up check on length parameters
		my $lfilters;
		foreach my $lf ( @{$iterhash{$it}}{('pc_var', 'base_var', 'codon_var', 'minlength', 'maxlength')} ){
			$lfilters++ if $lf ne 'NA';
		}
		
		printf "DEBUG: %d length specifications have non-NA values\n", $lfilters ? $lfilters : 0 if $debug;
		
		# Check over length parameters
		
		if($lfilters){
			if($lfilters == 1){
				if($iterhash{$it}{minlength} eq 'NA' and $iterhash{$it}{maxlength} eq 'NA'){
					$iterhash{$it}{base_var} = int(0.5 + ($iterhash{$it}{seqlength} / 100) * $iterhash{$it}{pc_var}) if($iterhash{$it}{pc_var} ne 'NA');
					$iterhash{$it}{base_var} = $iterhash{$it}{codon_var} * 3 if($iterhash{$it}{codon_var} ne 'NA');
					@{$iterhash{$it}}{('minlength', 'maxlength')} = ($iterhash{$it}{seqlength} - $iterhash{$it}{base_var}, $iterhash{$it}{seqlength} + $iterhash{$it}{base_var});
				}
				#$iterhash{$it}{minlength} = 0 if $iterhash{$it}{minlength} eq 'NA';
			} elsif($lfilters > 2 or 
				  ($lfilters == 2 and 
				    (($iterhash{$it}{minlength} eq 'NA' or $iterhash{$it}{maxlength} eq 'NA') 
					or
				     $iterhash{$it}{minlength} > $iterhash{$it}{maxlength}
				    )
				  )
				){
				delete $iterhash{$it};
				$removed{lerr}++;
			}
		} else {
#			$iterhash{$it}{minlength} = 0 if $iterhash{$it}{minlength} eq 'NA';
#			'pc_var', 'base_var', 'codon_var', 'minlength', 'maxlength', 'var_by_codon'};
		}
		
		# Check for redundant iterations
		
		my $compvalue = join "-", @{$iterhash{$it}}{('minlength', 'maxlength', 'var_by_codon')};
		
		print "DEBUG: comparison value is: $compvalue\n" if $debug;
		
		if(exists $itcompare{$compvalue}){
			delete $iterhash{$it};
			$removed{red}++;
			next;
		} else {
			$itcompare{$compvalue} = 1;
		}
		
	}
	
	# Finalise iterations
	
	my %pstore;
	foreach my $id (keys %iterhash){
		foreach my $param (keys %{$iterhash{$id}}){
			$pstore{$param}{$iterhash{$id}{$param}} = 1;
		}
	}
	print "DEBUG: pstore hash\n", Dumper \%pstore if $debug;
	
	foreach my $param (keys %pstore){
		$param_expand{$param} = [ keys %{$pstore{$param}} ];
	}
	$param_expand{lvar} = [ @uniquelparam ];
	
	return (\%iterhash, \%param_expand, \%removed);
}

sub read_fasta {
	my ($fapathin) = @_;
	my %fasta;
	my $id;
	open my $fa_in, '<', $fapathin or die "Couldn't open $fapathin\n";
	while(my $row = <$fa_in>){
		chomp $row;
		if($row =~ /^>(.+)$/){
			$id = $1;
		} elsif($row =~ /^[ATCGRYSWKMBVDHNatcgryswkmbvdhn]+$/){
			$fasta{$id} .= $row;
		} else { die "Couldn't read fasta format in $fapathin" };
	}
	close $fa_in;
	return %fasta;
}

sub identity {

	my($string1, $string2) = @_;

	# we assume that the strings have the same length
	my $length = length($string1);
	my $position;
	my $count = 0;
	my $gaps = 0;
	for ($position=0; $position < $length ; ++$position) {
		if(substr($string1,$position,1) eq substr($string2,$position,1)) {
			++$count;
		} elsif(substr($string1,$position,1) eq "-" || substr($string2,$position,1) eq "-"){
			++$gaps;
		}
	}

	return $count / ($length-$gaps);
}

sub datestamp{
my @time = localtime;
return sprintf "%04d-%02d-%02d",$time[5]+1900,$time[4]+1,$time[3];
}
